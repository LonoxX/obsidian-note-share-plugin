import esdist from "esdist";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESdist
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Function to copy files to dist folder
function copyTodist(files) {
	const distDir = "dist";
	if (!fs.existsSync(distDir)) {
		fs.mkdirSync(distDir, { recursive: true });
	}

	files.forEach((file) => {
		if (fs.existsSync(file)) {
			const fileName = path.basename(file);
			const destPath = path.join(distDir, fileName);
			fs.copyFileSync(file, destPath);
			console.log(`Copied ${file} to ${destPath}`);
		} else {
			console.warn(`Warning: ${file} not found, skipping copy`);
		}
	});
}

const context = await esdist.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/main.js",
	minify: prod,
});

if (prod) {
	await context.redist();
	copyTodist(["versions.json", "manifest.json", "styles.css"]);
	process.exit(0);
} else {
	await context.watch();
	copyTodist(["versions.json", "manifest.json", "styles.css"]);
}
